import HTTPClient.Cookie
import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import java.nio.file.Files
import java.nio.file.Paths
import java.util.concurrent.ThreadLocalRandom

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.is
import static org.junit.Assert.assertThat

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP. 
 *
 * This script is automatically generated by ngrinder.
 *
 * @author 임지훈
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test
    public static HTTPRequest request
    public static NVPair[] headers = []
    public static Cookie[] cookies = []
    public static List<String> limsvmList = new ArrayList<>()

    public static final String URI = "http://amatchsvc007-sa.nfra.io:10101/api/ranking"
    public static String bodyTemplate = "{\"libsvmList\": [{libsvmList}],\"predictorType\": \"XGBOOST4J\"\n}"
    public static int batchSize = 1000

    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000
        test = new GTest(1, "gfa ranking")
        request = new HTTPRequest()
        // Set header datas
        List<NVPair> headerList = new ArrayList<>()
        headerList.add(new NVPair("Content-Type", "application/json"))
        headers = headerList.toArray()

//        limsvmList = Files.readAllLines(Paths.get("src/main/resources/test.svm"))

        BufferedReader br = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream("test.svm")), "UTF-8"))
        String line
        while ((line = br.readLine()) != null) {
            limsvmList.add(line)
        }

        grinder.logger.info("before process.");
    }

    @BeforeThread
    public void beforeThread() {
        test.record(this, "test")
        grinder.statistics.delayReports = true;
        grinder.logger.info("before thread.");
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        cookies.each { CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) }
        grinder.logger.info("before. init headers and cookies");
    }

    @Test
    public void test() {

        int start = ThreadLocalRandom.current().nextInt(limsvmList.size() - batchSize)

        List<String> requestLibsvmList = limsvmList.subList(start, start + batchSize)

        StringBuilder sb = new StringBuilder()
        for (String line : requestLibsvmList) {
            sb.append("\"")
            sb.append(line)
            sb.append("\",")
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.toString()

        bodyTemplate.replace("{libsvmList}", sb.toString())

        HTTPResponse result = request.POST(URI, bodyTemplate.replace("{libsvmList}", sb.toString()).getBytes())

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
    }
}
